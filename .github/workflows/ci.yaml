name: CI
 
on:
  push:
    branches:
      - dev-ky 
  pull_request:
    branches:
      - dev-ky

# รองรับการอ่านเขียนที่เกี่ยวข้อง และอนุญาตให้เข้าถึง PR และเนื้อหา Label ของ PR
permissions:
  contents: write
  pull-requests: read

jobs:
  semantic-versioning:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Debug PR Number
      run: echo "PR_NUMBER=${{ github.event.pull_request.number }}"

    - name: Fetch Pull Request Labels
      id: fetch_labels
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        PR_NUMBER=${{ github.event.pull_request.number }}
        OWNER=${{ github.repository_owner }}
        REPO=$(echo ${{ github.repository }} | cut -d'/' -f2)
        PR_LABELS=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$OWNER/$REPO/issues/$PR_NUMBER | jq -r '.labels[].name')
        echo "PR_LABELS=$PR_LABELS" >> $GITHUB_ENV

    - name: Set up versioning
      id: versioning
      run: |
        # อ่านเวอร์ชันล่าสุดจาก Git Tag
        git fetch --tags
        LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) || echo "v0.0.0")
        echo "Latest tag: $LATEST_TAG"

        # แปลง tag เป็น Major.Minor.Patch
        VERSION=$(echo $LATEST_TAG | sed 's/v//')
        MAJOR=$(echo $VERSION | cut -d. -f1)
        MINOR=$(echo $VERSION | cut -d. -f2)
        PATCH=$(echo $VERSION | cut -d. -f3)

        # ตรวจสอบการเปลี่ยนแปลง (เช่น จาก commit message หรือ label)
        PR_LABELS="${{ github.event.pull_request.labels }}"
    
        if git log -1 --pretty=%B | grep -q '\[major\]' || [[ "$PR_LABELS" == *"major"* ]]; then
          MAJOR=$((MAJOR + 1))
          MINOR=0
          PATCH=0
        elif git log -1 --pretty=%B | grep -q '\[minor\]' || [[ "$PR_LABELS" == *"minor"* ]]; then
          MINOR=$((MINOR + 1))
          PATCH=0
        else
          PATCH=$((PATCH + 1))
        fi

        # สร้างเวอร์ชันใหม่
        NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "version=$NEW_VERSION" >> $GITHUB_ENV

    - name: Create and Push Tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git tag ${{ env.NEW_VERSION }}
        git push origin ${{ env.NEW_VERSION }}

    - name: Output version
      run: echo "New version is ${{ env.NEW_VERSION }}"

    outputs:
      version: ${{ env.NEW_VERSION }}  # เพิ่ม outputs ที่นี่

  docker-build:
    needs: semantic-versioning
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Output version
      run: echo "New version is ${{ needs.semantic-versioning.outputs.version }}"
    
    - name: Push Docker image
      run: |
          # ตรวจสอบว่า version ถูกต้อง
          echo "Version to tag: ${{ needs.semantic-versioning.outputs.version }}"

          # สร้าง Docker Image พร้อมเวอร์ชัน
          docker build -t ${{ secrets.DOCKER_USERNAME }}/web-grader:${{ needs.semantic-versioning.outputs.version }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/web-grader:${{ needs.semantic-versioning.outputs.version }}

          # อัปเดต Tag เป็น `latest`
          docker tag ${{ secrets.DOCKER_USERNAME }}/web-grader:${{ needs.semantic-versioning.outputs.version }} ${{ secrets.DOCKER_USERNAME }}/web-grader:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/web-grader:latest
