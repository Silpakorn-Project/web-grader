name: CI/CD

permissions:
  contents: write
  pull-requests: read 

on:
  push:
    branches:
      - build-dev
  pull_request:
    branches:
      - build-dev

jobs:
  test:
    name: Lint & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install
    
    #   - name: Run check
    #     run: bun check

    #   - name: Run Linter
    #     run: bun lint

    #   - name: Run Tests
    #     run: bun run test

  version:
    name: set version
    needs: test
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.versioning.outputs.new_version }} # ✅ ส่งค่าออกจาก job
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Labels from PR (only for PR)
        id: get-labels
        if : github.event_name == 'pull_request'
        run: |
            LABELS=$(gh pr view ${{ github.event.pull_request.number }} --json labels --jq '.labels[].name')
            echo "Labels: $LABELS"
            echo "labels=$LABELS" >> $GITHUB_ENV
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
      - name: Set up versioning
        id: versioning
        run: |
            git fetch --tags
            LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) || echo "v0.0.0")
            echo "Latest tag: $LATEST_TAG"

            VERSION=$(echo $LATEST_TAG | sed 's/v//')
            MAJOR=$(echo $VERSION | cut -d. -f1)
            MINOR=$(echo $VERSION | cut -d. -f2)
            PATCH=$(echo $VERSION | cut -d. -f3)

            if git log -1 --pretty=%B | grep -q '\[major\]' || [[ "${{ env.labels }}" == *"major"* ]]; then
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
            elif git log -1 --pretty=%B | grep -q '\[minor\]' || [[ "${{ env.labels }}" == *"minor"* ]]; then
                MINOR=$((MINOR + 1))
                PATCH=0
            else
                PATCH=$((PATCH + 1))
            fi

            NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
            echo "Old version: $LATEST_TAG"
            echo "New version: $NEW_VERSION"

            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT # ส่งไป job อื่น
            echo "old_version=$LATEST_TAG" >> $GITHUB_OUTPUT

  build:
    name: Build Image & Push to Docker Hub
    needs: version
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:

      - name: Use version from previous job
        run: |
            echo "Received version: ${{ needs.version.outputs.new_version }}"

      - name: Checkout repository
        uses: actions/checkout@v4
    
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
    
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
    
      - name: Build Docker image
        run: |
          docker build -t web-grader . 
          docker tag web-grader ${{ secrets.DOCKER_USERNAME }}/web-grader:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/web-grader:latest

          # Tag the image with the new version
          docker tag web-grader ${{ secrets.DOCKER_USERNAME }}/web-grader:${{ needs.version.outputs.new_version }}
          docker push ${{ secrets.DOCKER_USERNAME }}/web-grader:${{ needs.version.outputs.new_version }}
    
      - name: Create Git tag for version
        run: |
            # Set Git committer identity
            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"
          
            # Create and push the Git tag
            git tag -a "${{ needs.version.outputs.new_version }}" -m "Release version ${{ needs.version.outputs.new_version }}"
            git push origin "${{ needs.version.outputs.new_version }}"
      


