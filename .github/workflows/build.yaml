name: Build and Test

on:
  pull_request:
    branches:
      - main

# Permissions for accessing PR labels and contents
permissions:
  contents: write
  pull-requests: read 

jobs:
  semantic-versioning:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install GitHub CLI 
      run: sudo apt-get install gh

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Docker Build and Test
      run: |
        docker build -t web-grader -f Dockerfile.local .
        docker run -d -p 3000:3000 web-grader
        sleep 5

        # Wait until the server is ready
        until curl -sSf http://localhost:8080; do
            echo "Waiting for the server to start..." 
            sleep 2
        done

    - name: Get Labels from PR (only for PR)
      id: get-labels
      run: |
        LABELS=$(gh pr view ${{ github.event.pull_request.number }} --json labels --jq '.labels[].name')
        echo "Labels: $LABELS"
        echo "labels=$LABELS" >> $GITHUB_ENV
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up versioning
      id: versioning
      run: |
        git fetch --tags
        LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) || echo "v0.0.0")
        echo "Latest tag: $LATEST_TAG"

        VERSION=$(echo $LATEST_TAG | sed 's/v//')
        MAJOR=$(echo $VERSION | cut -d. -f1)
        MINOR=$(echo $VERSION | cut -d. -f2)
        PATCH=$(echo $VERSION | cut -d. -f3)

        if git log -1 --pretty=%B | grep -q '\[major\]' || [[ "${{ env.labels }}" == *"major"* ]]; then
          MAJOR=$((MAJOR + 1))
          MINOR=0
          PATCH=0
        elif git log -1 --pretty=%B | grep -q '\[minor\]' || [[ "${{ env.labels }}" == *"minor"* ]]; then
          MINOR=$((MINOR + 1))
          PATCH=0
        else
          PATCH=$((PATCH + 1))
        fi

        NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
        echo $NEW_VERSION > version.txt
        echo "New version: $NEW_VERSION"
    
    - name: Upload version as artifact
      uses: actions/upload-artifact@v4
      with:
        name: version-artifact
        path: version.txt
    
  use-version:
    needs: semantic-versioning
    runs-on: ubuntu-latest

    steps:
    - name: Download version artifact
      uses: actions/download-artifact@v4
      with:
        name: version-artifact

    - name: Read version from artifact
      run: |
        VERSION=$(cat version.txt)
        echo "Version from artifact is: $VERSION"

#   create-artifac:
#     runs-on: ubuntu-latest
#     steps:
#       - name: สร้างไฟล์สำหรับ Artifact
#         run: echo "MY_VARIABLE=HelloWorld" > artifact.env
      
#       - name: อัปโหลด Artifact
#         uses: actions/upload-artifact@v4
#         with:
#           name: my-artifact
#           path: artifact.env

#   use-artifact:
#     runs-on: ubuntu-latest
#     needs: create-artifac
#     steps:
#       - name: ดาวน์โหลด Artifact
#         uses: actions/download-artifact@v4
#         with:
#           name: my-artifact
      
#       - name: โหลดตัวแปรจาก Artifact
#         run: |
#           source artifact.env
#           echo "ตัวแปรที่โหลดคือ: $MY_VARIABLE"