name: Build and Test

on:
  pull_request:
    branches:
      - main

# Permissions for accessing PR labels and contents
permissions:
  contents: write
  pull-requests: read 

jobs:
  semantic-versioning:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install GitHub CLI 
      run: sudo apt-get install gh

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Docker Build and Test
      run: |
        docker build -t web-grader -f Dockerfile.local .
        docker run -d -p 3000:3000 web-grader
        sleep 5 

        # Define the maximum number of retries 
        MAX_RETRIES=5
        RETRIES=0
        until curl -sSf http://localhost:3000 || [ $RETRIES -ge $MAX_RETRIES ]; do
            echo "Round ($((RETRIES+1))/$MAX_RETRIES)"
            sleep 5 
            RETRIES=$((RETRIES + 1))
        done

        # if the maximum number of retries is reached, stop the container and exit 
        if [ $RETRIES -ge $MAX_RETRIES ]; then
            echo "Failed to start the container"
            exit 1
        fi

        docker stop $(docker ps -q)
        docker rm $(docker ps -a -q)

    - name: Get Labels from PR (only for PR)
      id: get-labels
      run: |
        LABELS=$(gh pr view ${{ github.event.pull_request.number }} --json labels --jq '.labels[].name')
        echo "Labels: $LABELS"
        echo "labels=$LABELS" >> $GITHUB_ENV
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Delete version.txt if it exists
      run: |
        if [ -f version.txt ]; then
            echo "version.txt exists. Deleting..."
            rm version.txt

            # Commit and push the changes
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add version.txt
            git commit -m "Remove existing version.txt"
            git push origin ${{ github.head_ref }}
        else
            echo "version.txt does not exist. Proceeding..."
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up versioning
      id: versioning
      run: |
        git fetch --tags
        LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) || echo "v0.0.0")
        echo "Latest tag: $LATEST_TAG"

        VERSION=$(echo $LATEST_TAG | sed 's/v//')
        MAJOR=$(echo $VERSION | cut -d. -f1)
        MINOR=$(echo $VERSION | cut -d. -f2)
        PATCH=$(echo $VERSION | cut -d. -f3)

        if git log -1 --pretty=%B | grep -q '\[major\]' || [[ "${{ env.labels }}" == *"major"* ]]; then
          MAJOR=$((MAJOR + 1))
          MINOR=0
          PATCH=0
        elif git log -1 --pretty=%B | grep -q '\[minor\]' || [[ "${{ env.labels }}" == *"minor"* ]]; then
          MINOR=$((MINOR + 1))
          PATCH=0
        else
          PATCH=$((PATCH + 1))
        fi

        NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
        echo $NEW_VERSION > version.txt
        echo "New version: $NEW_VERSION"
    
    - name: Checkout PR branch
      run: git checkout ${{ github.head_ref }}
    
    - name: Commit Version
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        if ! git diff --quiet version.txt; then
          echo "version.txt has changed. Committing..."
          git add version.txt
          git commit -m "Set version from pull request #${{ github.event.pull_request.number }}"
          git push origin ${{ github.head_ref }}
        else
          echo "No changes in version.txt. Skipping commit."
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


